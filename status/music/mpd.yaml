require:
  - librmpd
  - fileutils

status:
  music:
    params:
      playlist_directory: '~/.mpd/playlists'

    script: |
      @playlist_directory = File.expand_path(@playlist_directory)

      def mpd
        @mpd or begin
          @mpd = MPD.new
          at_exit do
            @mpd.disconnect
            @mpd = nil # avoid storing MPD instance in Wmiirc::SESSION
          end
          @mpd.connect true
          @mpd.password password if @password
          @mpd
        end
      end

    label: |
      if mpd.stopped?
        icon = "\u25A0"
      else
        song = mpd.current_song

        if title = song.title || (f = song.file and File.basename(f))
          # infer artist from song title
          if not artist = song.artist and title =~ /\s+-\s+/
            artist, title = $`, $'
          end

          # remove parenthetical subtext
          title = title.sub(/(.+)\s*\(.*/, '\1')
        end

        icon = mpd.paused? ? "\u25AE" * 2 : "\u25B6"
        label = [title, artist].compact.join(' by ')
      end

      [icon, label.force_encoding(Encoding::UTF_8)] rescue label

    control:
      action:
        music_play!: |
          if mpd.stopped?
            mpd.play
          else
            mpd.pause = !mpd.paused?
          end
          refresh

        music_pause: |
          mpd.pause = true
          refresh

        music_stop: |
          mpd.stop
          refresh

        music_next: |
          mpd.next
          refresh

        music_previous: |
          mpd.previous
          refresh

        music_menu: |
          songs = `mpc playlist`.downcase.lines.map(&:chomp)
          if index = index_menu(songs, 'play song:', :song)
            # MPD uses natural 1..N numbering
            system "mpc play #{index + 1}"
          end
          refresh

        music_playlist_menu: | # load chosen playlist
          if choice = key_menu(mpd.playlists, 'load playlist:', :playlist)
            mpd.clear
            mpd.load choice
            mpd.play
          end

        music_favorite_menu: | # add current song to chosen playlist
          if choice = key_menu(mpd.playlists, 'save favorite:')
            dir = FileUtils.mkdir_p(@playlist_directory).first
            m3u = File.join(dir, choice + '.m3u')

            songs = File.readlines(m3u) rescue []
            songs << mpd.current_song.file
            songs.uniq!

            File.open(m3u, 'w') {|f| f.puts songs }
          end


      mouse_action:
        left_click: music_play!
        right_click: music_stop
        wheel_up: music_previous
        wheel_down: music_next
        wheel_click: music_menu
