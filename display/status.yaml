import:
  - display/barlet

script:
  - before: |
      class StatusBarlet < Barlet
        def initialize path
          super path, :right
        end
      end

      class Status < Sandbox
        def initialize name, definition, position
          # make parameters that begin with '@' in the definition hash
          # available as instance variables for use by Ruby code therein
          definition.each do |key, value|
            if key.start_with? '@'
              instance_variable_set key, value
            end
          end

          if code = definition['script']
            instance_eval code.to_s,
              CONFIG.origin(code, "display:status:#{name}:script")
          end

          code = definition['label']
          instance_eval "def label; #{code}; end",
            CONFIG.origin(code, "display:status:#{name}:label")

          # buttons appear in ASCII order of their IXP file name
          # so prepend a number to get ordered status bar applets
          file = "#{position}-#{name}"
          button = StatusBarlet.new(file)

          colors_hash = CONFIG['display']['color']
          label_refresh_thread = Thread.new do
            loop do
              button_label = begin
                Array(self.label)
              rescue Exception => e
                LOG.error e
                [colors_hash['error'], e]
              end

              # provide default color
              possible_color = button_label.first.to_s
              if colors_hash.key? possible_color
                button_label[0] = colors_hash[possible_color]
              elsif possible_color !~ /(?:#[[:xdigit:]]{6} ?){3}/
                button_label.unshift colors_hash['normal']
              end

              button.colors = button_label.shift
              button.label = button_label.join(' ')

              sleep(*Array(definition['refresh']))
            end
          end

          (class << self; self; end).class_eval do
            define_method :refresh do
              label_refresh_thread.wakeup if label_refresh_thread.alive?
            end
          end

          # register action handlers
          if control = definition['control']
            action_by_local_name = {}

            if actions = control['action']
              actions.each do |action_name, code|
                handler = instance_eval "lambda {#{code}}", CONFIG.origin(
                  code, "display:status:#{name}:control:action:#{action_name}"
                )

                action_by_local_name[action_name] = handler

                # first instance of this status bar applet gets the honor of
                # registering its action handlers under the global namespace
                unless Wmiirc.action? action_name
                  Wmiirc.action action_name, &handler
                end

                # the button path suffix makes this action name unique
                # to this particular instance of the status bar applet
                # when we register the handler in the global namespace
                Wmiirc.action action_name + button.path, &handler
              end
            end

            if keyboard_actions = control['keyboard_action']
              keyboard_actions.each do |key, action_name|
                # FIXME: this code was copied from lib/wmiirc/config.rb

                # expand ${...} in keyboard shortcuts
                key = key.gsub(/\$\{(.+?)\}/) do
                  CONFIG['control']['keyboard'][$1]
                end

                # other instances of this status bar applet may have already
                # registered a handler for this keypress, so we skip this to
                # avoid triggering the keypress handler multiple times!
                unless Wmiirc.key? key
                  Wmiirc.key(key) {|*argv| Wmiirc.action action_name }
                end
              end
            end

            if mouse_actions = control['mouse_action']
              Wmiirc.event 'RightBarClick' do |clicked_button, clicked_file|
                if clicked_file == file
                  if action = mouse_actions[Mouse[clicked_button]]
                    if handler = action_by_local_name[action]
                      # the given action is local to this status bar applet
                      handler.call
                    else
                      # the given action is global to the wmii configuration
                      Wmiirc.action action
                    end
                  end
                end
              end
            end

            if events = control['event']
              events.each do |event_name, code|
                origin = CONFIG.origin(code, "display:status:#{name}:control:event:#{event_name}")
                handler = instance_eval("lambda {|*argv| #{code}}", origin)
                Wmiirc.event event_name, &handler
              end
            end
          end
        end
      end

      # find all status bar applet definitions, which can
      # be nested deeply in the display:status namespace
      applets = []

      find_applets = lambda do |name, definition|
        if definition.respond_to? :key? and definition.key? 'label'
          applets << [name, definition]
        elsif definition.respond_to? :each_value
          definition.each do |child_name, child_definition|
            child_path = [name, child_name].compact.join(':')
            find_applets.call child_path, child_definition
          end
        end
      end

      find_applets.call nil, CONFIG['display']['status']

      # populate the status bar with applet instances
      fs.rbar.clear

      applets.each_with_index do |(name, definition), position|
        # TODO: recursive merge with override logging like Wmiirc::Config.merge()
        instances = Array(definition['instances']).map {|h| definition.merge h }

        # user did not specify any instances, so treat the status
        # bar applet definition as an implicit singleton instance
        instances << definition if instances.empty?

        instances.each_with_index do |instance, offset|
          Status.new name, instance, "#{position}-#{offset}"
        end
      end
