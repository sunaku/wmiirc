script:
  before:
    - |
      # remember most recently focused view whenever view focus changes
      recent_view_ids = [SESSION[:recent_view_id]]
      event 'FocusTag' do |view_id|
        SESSION[:recent_view_id] = recent_view_ids.shift
        recent_view_ids << view_id
      end

      # remember most recently focused client whenever client focus changes
      recent_client_ids = [SESSION[:recent_client_id]]
      event 'ClientFocus' do |client_id|
        SESSION[:recent_client_id] = recent_client_ids.shift
        recent_client_ids << client_id
      end

control:
  action:

    focus_client_menu: |
      if client = client_menu('show client:', :client)
        client.focus
      end

    focus_client_up: curr_view.select(:up) rescue nil
    focus_client_down: curr_view.select(:down) rescue nil
    focus_client_left: curr_view.select(:left) rescue nil
    focus_client_right: curr_view.select(:right) rescue nil
    focus_client_recent: |
      before = curr_client
      target = SESSION[:recent_client_id]
      begin
        Client.focus(target, curr_view)        # focus target in current view
        Client.focus(target) if before.focus?  # not found; search all views
        next_client.focus(curr_view) if before.focus? # fallback to neighbor
      rescue
        # ignore
      end

    focus_client_view_next: |
      c = curr_client
      v = next_view
      v = v.next until v.client_ids.include? c.id
      v.focus
      c.focus v

    focus_client_view_previous: |
      c = curr_client
      v = prev_view
      v = v.prev until v.client_ids.include? c.id
      v.focus
      c.focus v

    focus_floating!: curr_view.select(:toggle)

    focus_view_menu: |
      if choice = key_menu(tags, 'show view:', :tag)
        focus_view choice
      end

    focus_view_previous: prev_view.focus
    focus_view_next: next_view.focus
    focus_view_recent: View.focus(SESSION[:recent_view_id]) rescue nil

    focus_view_1: focus_view tags[0] || 1
    focus_view_2: focus_view tags[1] || 2
    focus_view_3: focus_view tags[2] || 3
    focus_view_4: focus_view tags[3] || 4
    focus_view_5: focus_view tags[4] || 5
    focus_view_6: focus_view tags[5] || 6
    focus_view_7: focus_view tags[6] || 7
    focus_view_8: focus_view tags[7] || 8
    focus_view_9: focus_view tags[8] || 9
    focus_view_0: focus_view tags[9] || 10

    focus_view_a: t = tags.grep(/^a/i).first and focus_view(t)
    focus_view_b: t = tags.grep(/^b/i).first and focus_view(t)
    focus_view_c: t = tags.grep(/^c/i).first and focus_view(t)
    focus_view_d: t = tags.grep(/^d/i).first and focus_view(t)
    focus_view_e: t = tags.grep(/^e/i).first and focus_view(t)
    focus_view_f: t = tags.grep(/^f/i).first and focus_view(t)
    focus_view_g: t = tags.grep(/^g/i).first and focus_view(t)
    focus_view_h: t = tags.grep(/^h/i).first and focus_view(t)
    focus_view_i: t = tags.grep(/^i/i).first and focus_view(t)
    focus_view_j: t = tags.grep(/^j/i).first and focus_view(t)
    focus_view_k: t = tags.grep(/^k/i).first and focus_view(t)
    focus_view_l: t = tags.grep(/^l/i).first and focus_view(t)
    focus_view_m: t = tags.grep(/^m/i).first and focus_view(t)
    focus_view_n: t = tags.grep(/^n/i).first and focus_view(t)
    focus_view_o: t = tags.grep(/^o/i).first and focus_view(t)
    focus_view_p: t = tags.grep(/^p/i).first and focus_view(t)
    focus_view_q: t = tags.grep(/^q/i).first and focus_view(t)
    focus_view_r: t = tags.grep(/^r/i).first and focus_view(t)
    focus_view_s: t = tags.grep(/^s/i).first and focus_view(t)
    focus_view_t: t = tags.grep(/^t/i).first and focus_view(t)
    focus_view_u: t = tags.grep(/^u/i).first and focus_view(t)
    focus_view_v: t = tags.grep(/^v/i).first and focus_view(t)
    focus_view_w: t = tags.grep(/^w/i).first and focus_view(t)
    focus_view_x: t = tags.grep(/^x/i).first and focus_view(t)
    focus_view_y: t = tags.grep(/^y/i).first and focus_view(t)
    focus_view_z: t = tags.grep(/^z/i).first and focus_view(t)
